/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package com.ravnaandtines.crypt.mda;

import junit.framework.TestCase;

/**
 *
 * @author Steve
 */
public class MDATest extends TestCase
{

	public MDATest(String testName)
	{
		super(testName);
	}


	/**
     * Test of update method, of class MDA.
     */
		public void testMetaTest() {
		// Use .Net reflection to find the classes
		// System.out.println("test -- metatest");
		MD5 prototype = new MD5();
		System.Reflection.Assembly algorithms = prototype.GetType().get_Assembly();
		System.Type[] types = algorithms.GetTypes();
		//System.out.println("classes to test");

		System.Type mda = algorithms.GetType("com.ravnaandtines.crypt.mda.MDA");

		for (int k = 0; k < types.length; ++k )
		{
			final System.Type underTest = types[k];
			if (!mda.IsAssignableFrom(underTest))
			{
				continue;
			}
			//System.out.println(underTest);


			Object test = null;
			try {
				test = underTest.InvokeMember(null, System.Reflection.BindingFlags.CreateInstance,
					null, null, null);
			} catch (System.Exception ex) {
				continue;
			}

			final byte[] baseline = new byte[3];
			for (int i = 0; i < 3; ++i)
			{
				baseline[i] = (byte)(i & 0xFF);
			}
			final byte[] offset = new byte[12];
			for (int i = 0; i < 12; ++i)
			{
				offset[i] = (byte)((i - 4) & 0xFF);
			}
			MDA hash = (MDA)test;
			hash.update(baseline, 0, baseline.length);
			final byte[] result1 = hash.digest();

			hash = (MDA)underTest.InvokeMember(null, System.Reflection.BindingFlags.CreateInstance,
					null, null, null);
			hash.update(offset[4]);
			hash.update(offset[5]);
			hash.update(offset[6]);
			byte[] result2 = hash.digest();

			assertEquals("part 1 " + underTest.ToString(),
					result1.length, result2.length);
			for (int i = 0; i < result1.length; ++i)
			{
				assertEquals("part 1b " + underTest.ToString(),
					result1[i], result2[i]);
			}

			hash = (MDA)underTest.InvokeMember(null, System.Reflection.BindingFlags.CreateInstance,
					null, null, null);
			hash.update(offset, 4, 3);
			result2 = hash.digest();

			assertEquals("part 2 " + underTest.ToString(),
					result1.length, result2.length);
			for (int i = 0; i < result1.length; ++i)
			{
				assertEquals("part 2b " + underTest.ToString(),
					result1[i], result2[i]);
			}

		}



	}

}
