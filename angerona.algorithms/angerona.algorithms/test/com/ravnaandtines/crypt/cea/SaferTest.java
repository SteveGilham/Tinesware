/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package com.ravnaandtines.crypt.cea;


import junit.framework.TestCase;


/**
 *
 * @author Steve
 */
public class SaferTest extends TestCase {
    
    public SaferTest(final String testName) {
        super(testName);
    }

        private static final int[] round = {6, 6, 10, 10, 10};
        // some standard test vectors
        private static final byte[][] keys = {
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01
    },
            {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
        0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08
    },
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01
    },
            {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    },
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08
    }
        };
        private static final byte[][] plain = {
            {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08},
            {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08},
            {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08},
            {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08},
            {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08}};
        private static final byte[][] cipher = {
            {0x15, 0x1B, (byte) 0xFF, 0x02, (byte) 0xAD, 0x11, (byte) 0xBF, 0x2D},
            {0x5F, (byte) 0xCE, (byte) 0x9B, (byte) 0xA2, 0x05, (byte) 0x84, 0x38, (byte) 0xC7},
            {0x41, 0x4C, 0x54, 0x5A, (byte) 0xB6, (byte) 0x99, 0x4A, (byte) 0xF7},
            {(byte) 0xFF, 0x78, 0x11, (byte) 0xE4, (byte) 0xB3, (byte) 0xA7, 0x2E, 0x71},
            {0x49, (byte) 0xC9, (byte) 0x9D, (byte) 0x98, (byte) 0xA5, (byte) 0xBC, 0x59, 0x08}};


        private static final byte[] work = new byte[Safer.BLOCKSIZE];
        private static final byte[] work2 = new byte[Safer.BLOCKSIZE];

    public void testSafer0() {
        doSaferTest(0);
    }
    private void doSaferTest(final int testNumber) {
        final Safer crypt = new Safer(testNumber > 1, true, round[testNumber]);
        crypt.init(keys[testNumber], 0, false);
        crypt.ecb(true, plain[testNumber], 0, work, 0);

        for (int i = 0; i < 8; ++i) {
            assertEquals("encrypt test "+testNumber+","+i, cipher[testNumber][i] &0xff,
                    work[i] & 0xff);
        }

        crypt.ecb(false, work, 0, work2, 0);

        for (int i = 0; i < 8; ++i) {
            assertEquals("decrypt test " + testNumber + "," + i, plain[testNumber][i] & 0xff,
                    work2[i] & 0xff);
        }
        crypt.destroy();
    }
    
    public void testSafer1() {
        doSaferTest(1);
    }
    public void testSafer2() {
        doSaferTest(2);
    }
    public void testSafer3() {
        doSaferTest(3);
    }
    public void testSafer4() {
        doSaferTest(4);
    }

}
